{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://xala-technologies.com/schemas/validation-rules/v5.0.0",
  "title": "Xala UI Component Validation Rules Schema v5.0",
  "description": "Comprehensive validation rules for UI component specifications with Norwegian compliance and enterprise standards",
  "type": "object",
  "definitions": {
    "validationRule": {
      "type": "object",
      "required": ["id", "type", "severity", "message"],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[A-Z][A-Z0-9_]*[0-9]{3}$",
          "description": "Unique rule identifier (e.g., PROP_001, META_002)"
        },
        "type": {
          "type": "string",
          "enum": [
            "required",
            "type-check",
            "pattern-match",
            "constraint",
            "dependency",
            "compliance",
            "accessibility",
            "performance",
            "security",
            "custom"
          ]
        },
        "category": {
          "type": "string",
          "enum": [
            "metadata",
            "props",
            "accessibility",
            "compliance",
            "platforms",
            "examples",
            "performance",
            "security",
            "i18n"
          ]
        },
        "severity": {
          "type": "string",
          "enum": ["error", "warning", "info"],
          "description": "Validation severity level"
        },
        "message": {
          "type": "string",
          "description": "Human-readable error message"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the rule"
        },
        "fixable": {
          "type": "boolean",
          "default": false,
          "description": "Whether this rule can be auto-fixed"
        },
        "autoFix": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "enum": ["add", "remove", "replace", "format"]
            },
            "target": {
              "type": "string",
              "description": "JSONPath to the target field"
            },
            "value": {
              "description": "Value to apply in auto-fix"
            },
            "template": {
              "type": "string",
              "description": "Template for generating fix value"
            }
          }
        },
        "platforms": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["react", "vue", "angular", "svelte", "solid", "web-components", "all"]
          },
          "default": ["all"],
          "description": "Platforms this rule applies to"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags for categorizing and filtering rules"
        }
      }
    },
    "conditionalRule": {
      "allOf": [
        {
          "$ref": "#/definitions/validationRule"
        },
        {
          "type": "object",
          "required": ["condition"],
          "properties": {
            "condition": {
              "type": "object",
              "required": ["field", "operator", "value"],
              "properties": {
                "field": {
                  "type": "string",
                  "description": "JSONPath to the field to check"
                },
                "operator": {
                  "type": "string",
                  "enum": ["equals", "not-equals", "contains", "not-contains", "exists", "not-exists", "greater-than", "less-than", "matches", "not-matches"]
                },
                "value": {
                  "description": "Value to compare against"
                },
                "logicalOperator": {
                  "type": "string",
                  "enum": ["and", "or"],
                  "description": "Logical operator for multiple conditions"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/conditionalRule/properties/condition"
                  },
                  "description": "Additional conditions for complex logic"
                }
              }
            }
          }
        }
      ]
    },
    "customValidator": {
      "type": "object",
      "required": ["name", "implementation"],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z][a-zA-Z0-9]*$",
          "description": "Validator function name"
        },
        "implementation": {
          "type": "object",
          "required": ["javascript"],
          "properties": {
            "javascript": {
              "type": "string",
              "description": "JavaScript function implementation"
            },
            "typescript": {
              "type": "string",
              "description": "TypeScript function implementation"
            }
          }
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "required": {
                "type": "boolean"
              },
              "description": {
                "type": "string"
              }
            }
          }
        },
        "returnType": {
          "type": "string",
          "description": "Expected return type"
        },
        "description": {
          "type": "string"
        }
      }
    }
  },
  "properties": {
    "version": {
      "type": "string",
      "const": "5.0.0",
      "description": "Schema version"
    },
    "metadata": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "default": "Xala UI Component Validation Rules"
        },
        "description": {
          "type": "string",
          "default": "Validation rules for UI component specifications"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "type": "string"
        }
      }
    },
    "rulesets": {
      "type": "object",
      "properties": {
        "core": {
          "type": "object",
          "description": "Core validation rules that apply to all components",
          "properties": {
            "metadata": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/validationRule"
              },
              "default": [
                {
                  "id": "META_001",
                  "type": "required",
                  "category": "metadata",
                  "severity": "error",
                  "message": "Component name is required",
                  "description": "Every component must have a name in PascalCase format",
                  "fixable": false,
                  "tags": ["required", "naming"]
                },
                {
                  "id": "META_002",
                  "type": "pattern-match",
                  "category": "metadata",
                  "severity": "error",
                  "message": "Component name must be PascalCase",
                  "description": "Component names must follow PascalCase convention (e.g., ButtonPrimary, DataTable)",
                  "fixable": true,
                  "autoFix": {
                    "action": "format",
                    "target": "$.metadata.name",
                    "template": "toPascalCase"
                  },
                  "tags": ["naming", "convention"]
                },
                {
                  "id": "META_003",
                  "type": "required",
                  "category": "metadata",
                  "severity": "error",
                  "message": "Component version is required",
                  "description": "Every component must have a semantic version number",
                  "fixable": true,
                  "autoFix": {
                    "action": "add",
                    "target": "$.metadata.version",
                    "value": "1.0.0"
                  },
                  "tags": ["required", "versioning"]
                },
                {
                  "id": "META_004",
                  "type": "pattern-match",
                  "category": "metadata",
                  "severity": "error",
                  "message": "Invalid semantic version format",
                  "description": "Version must follow semantic versioning (e.g., 1.0.0, 2.1.3-beta.1)",
                  "fixable": false,
                  "tags": ["versioning", "format"]
                },
                {
                  "id": "META_005",
                  "type": "constraint",
                  "category": "metadata",
                  "severity": "warning",
                  "message": "Description should be between 10 and 500 characters",
                  "description": "Component descriptions should be comprehensive but concise",
                  "fixable": false,
                  "tags": ["documentation", "length"]
                }
              ]
            },
            "props": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/validationRule"
              },
              "default": [
                {
                  "id": "PROP_001",
                  "type": "type-check",
                  "category": "props",
                  "severity": "error",
                  "message": "All props must have a defined type",
                  "description": "Every prop must specify its type for proper TypeScript generation",
                  "fixable": false,
                  "tags": ["required", "typescript"]
                },
                {
                  "id": "PROP_002",
                  "type": "required",
                  "category": "props",
                  "severity": "error",
                  "message": "Prop description is required",
                  "description": "All props must have clear, descriptive documentation",
                  "fixable": false,
                  "tags": ["required", "documentation"]
                },
                {
                  "id": "PROP_003",
                  "type": "constraint",
                  "category": "props",
                  "severity": "warning",
                  "message": "Prop description should be at least 5 characters",
                  "description": "Prop descriptions should be meaningful and informative",
                  "fixable": false,
                  "tags": ["documentation", "quality"]
                },
                {
                  "id": "PROP_004",
                  "type": "pattern-match",
                  "category": "props",
                  "severity": "error",
                  "message": "Prop name must be camelCase",
                  "description": "Prop names must follow camelCase convention (e.g., buttonSize, isDisabled)",
                  "fixable": true,
                  "autoFix": {
                    "action": "format",
                    "target": "$.props.schema.*",
                    "template": "toCamelCase"
                  },
                  "tags": ["naming", "convention"]
                },
                {
                  "id": "PROP_005",
                  "type": "constraint",
                  "category": "props",
                  "severity": "warning",
                  "message": "Consider providing default values for optional props",
                  "description": "Optional props should have sensible default values when possible",
                  "fixable": false,
                  "tags": ["defaults", "usability"]
                }
              ]
            },
            "accessibility": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/validationRule"
              },
              "default": [
                {
                  "id": "A11Y_001",
                  "type": "required",
                  "category": "accessibility",
                  "severity": "error",
                  "message": "Accessibility role is required",
                  "description": "Every component must specify its primary ARIA role",
                  "fixable": false,
                  "tags": ["required", "aria", "wcag"]
                },
                {
                  "id": "A11Y_002",
                  "type": "compliance",
                  "category": "accessibility",
                  "severity": "error",
                  "message": "WCAG level must be AA or AAA",
                  "description": "Components must meet at least WCAG AA standards, AAA preferred",
                  "fixable": true,
                  "autoFix": {
                    "action": "replace",
                    "target": "$.compliance.wcag.level",
                    "value": "AAA"
                  },
                  "tags": ["wcag", "compliance"]
                },
                {
                  "id": "A11Y_003",
                  "type": "required",
                  "category": "accessibility",
                  "severity": "error",
                  "message": "Keyboard navigation support must be specified",
                  "description": "All interactive components must document keyboard navigation patterns",
                  "fixable": false,
                  "tags": ["keyboard", "navigation", "required"]
                },
                {
                  "id": "A11Y_004",
                  "type": "constraint",
                  "category": "accessibility",
                  "severity": "warning",
                  "message": "Color contrast should meet AAA standards (7:1 for normal text, 4.5:1 for large text)",
                  "description": "Higher contrast ratios improve accessibility for users with visual impairments",
                  "fixable": false,
                  "tags": ["contrast", "color", "wcag-aaa"]
                },
                {
                  "id": "A11Y_005",
                  "type": "required",
                  "category": "accessibility",
                  "severity": "error",
                  "message": "Screen reader announcements must be defined for dynamic content",
                  "description": "Components with changing content must specify screen reader announcements",
                  "fixable": false,
                  "tags": ["screen-reader", "dynamic", "aria-live"]
                }
              ]
            }
          }
        },
        "norwegian": {
          "type": "object",
          "description": "Norwegian compliance validation rules",
          "properties": {
            "compliance": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/validationRule"
              },
              "default": [
                {
                  "id": "NO_001",
                  "type": "compliance",
                  "category": "compliance",
                  "severity": "error",
                  "message": "NSM classification is required",
                  "description": "All components must specify NSM security classification",
                  "fixable": true,
                  "autoFix": {
                    "action": "add",
                    "target": "$.compliance.norwegian.nsmClassification",
                    "value": "OPEN"
                  },
                  "tags": ["nsm", "security", "required"]
                },
                {
                  "id": "NO_002",
                  "type": "compliance",
                  "category": "compliance",
                  "severity": "error",
                  "message": "GDPR compliance must be verified",
                  "description": "Components handling personal data must be GDPR compliant",
                  "fixable": true,
                  "autoFix": {
                    "action": "add",
                    "target": "$.compliance.norwegian.gdprCompliant",
                    "value": true
                  },
                  "tags": ["gdpr", "privacy", "required"]
                },
                {
                  "id": "NO_003",
                  "type": "compliance",
                  "category": "i18n",
                  "severity": "error",
                  "message": "Norwegian (nb-NO) must be the default locale",
                  "description": "Norwegian Bokmål must be the primary language for Norwegian compliance",
                  "fixable": true,
                  "autoFix": {
                    "action": "replace",
                    "target": "$.compliance.i18n.defaultLocale",
                    "value": "nb-NO"
                  },
                  "tags": ["i18n", "locale", "norwegian"]
                },
                {
                  "id": "NO_004",
                  "type": "compliance",
                  "category": "i18n",
                  "severity": "warning",
                  "message": "Consider supporting Sami languages for government applications",
                  "description": "Government applications should consider supporting North Sami (se), Lule Sami (smj), and South Sami (sma)",
                  "fixable": false,
                  "tags": ["i18n", "sami", "government"]
                }
              ]
            }
          }
        },
        "performance": {
          "type": "object",
          "description": "Performance validation rules",
          "properties": {
            "metrics": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/validationRule"
              },
              "default": [
                {
                  "id": "PERF_001",
                  "type": "constraint",
                  "category": "performance",
                  "severity": "warning",
                  "message": "Bundle size should be specified",
                  "description": "Components should document their impact on bundle size",
                  "fixable": false,
                  "tags": ["bundle-size", "optimization"]
                },
                {
                  "id": "PERF_002",
                  "type": "constraint",
                  "category": "performance",
                  "severity": "warning",
                  "message": "Consider lazy loading for large components",
                  "description": "Components over 50KB should support lazy loading",
                  "fixable": false,
                  "tags": ["lazy-loading", "optimization"]
                }
              ]
            }
          }
        },
        "security": {
          "type": "object",
          "description": "Security validation rules",
          "properties": {
            "validation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/validationRule"
              },
              "default": [
                {
                  "id": "SEC_001",
                  "type": "security",
                  "category": "security",
                  "severity": "error",
                  "message": "Props accepting HTML content must be sanitized",
                  "description": "Any prop that accepts HTML content must implement XSS prevention",
                  "fixable": false,
                  "tags": ["xss", "sanitization", "html"]
                },
                {
                  "id": "SEC_002",
                  "type": "security",
                  "category": "security",
                  "severity": "warning",
                  "message": "Consider CSP compatibility for inline styles",
                  "description": "Components should be compatible with Content Security Policy restrictions",
                  "fixable": false,
                  "tags": ["csp", "inline-styles", "security"]
                }
              ]
            }
          }
        },
        "platform": {
          "type": "object",
          "description": "Platform-specific validation rules",
          "properties": {
            "react": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/conditionalRule"
              },
              "default": [
                {
                  "id": "REACT_001",
                  "type": "type-check",
                  "category": "platforms",
                  "severity": "error",
                  "message": "React components must specify JSX.Element return type",
                  "description": "All React functional components must have explicit return type",
                  "condition": {
                    "field": "$.platforms.supported",
                    "operator": "contains",
                    "value": "react"
                  },
                  "fixable": false,
                  "platforms": ["react"],
                  "tags": ["typescript", "react", "return-type"]
                },
                {
                  "id": "REACT_002",
                  "type": "constraint",
                  "category": "platforms",
                  "severity": "warning",
                  "message": "Consider using React.memo for performance optimization",
                  "description": "Components with complex props should be wrapped in React.memo",
                  "condition": {
                    "field": "$.platforms.supported",
                    "operator": "contains",
                    "value": "react"
                  },
                  "fixable": false,
                  "platforms": ["react"],
                  "tags": ["performance", "react", "memo"]
                }
              ]
            },
            "vue": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/conditionalRule"
              },
              "default": [
                {
                  "id": "VUE_001",
                  "type": "constraint",
                  "category": "platforms",
                  "severity": "warning",
                  "message": "Vue components should define emits for better TypeScript support",
                  "description": "Vue 3 components should explicitly define their emits",
                  "condition": {
                    "field": "$.platforms.supported",
                    "operator": "contains",
                    "value": "vue"
                  },
                  "fixable": false,
                  "platforms": ["vue"],
                  "tags": ["vue", "emits", "typescript"]
                }
              ]
            }
          }
        }
      }
    },
    "customValidators": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/customValidator"
      },
      "default": [
        {
          "name": "validateNorwegianCompliance",
          "implementation": {
            "javascript": "function validateNorwegianCompliance(component) { return component.compliance?.norwegian?.nsmClassification && component.compliance?.norwegian?.gdprCompliant && component.compliance?.i18n?.defaultLocale === 'nb-NO'; }",
            "typescript": "function validateNorwegianCompliance(component: ComponentSchema): boolean { return !!(component.compliance?.norwegian?.nsmClassification && component.compliance?.norwegian?.gdprCompliant && component.compliance?.i18n?.defaultLocale === 'nb-NO'); }"
          },
          "parameters": [
            {
              "name": "component",
              "type": "ComponentSchema",
              "required": true,
              "description": "Component specification to validate"
            }
          ],
          "returnType": "boolean",
          "description": "Validates Norwegian compliance requirements"
        },
        {
          "name": "validateAccessibilityCompleteness",
          "implementation": {
            "javascript": "function validateAccessibilityCompleteness(accessibility) { return accessibility.role?.primary && accessibility.keyboardNavigation?.supported !== undefined && accessibility.screenReader?.announcements && accessibility.screenReader?.labels; }",
            "typescript": "function validateAccessibilityCompleteness(accessibility: AccessibilitySpec): boolean { return !!(accessibility.role?.primary && accessibility.keyboardNavigation?.supported !== undefined && accessibility.screenReader?.announcements && accessibility.screenReader?.labels); }"
          },
          "parameters": [
            {
              "name": "accessibility",
              "type": "AccessibilitySpec",
              "required": true,
              "description": "Accessibility specification to validate"
            }
          ],
          "returnType": "boolean",
          "description": "Validates completeness of accessibility specifications"
        },
        {
          "name": "validatePropNaming",
          "implementation": {
            "javascript": "function validatePropNaming(propName) { return /^[a-z][a-zA-Z0-9]*$/.test(propName) && !propName.startsWith('on') || /^on[A-Z][a-zA-Z0-9]*$/.test(propName); }",
            "typescript": "function validatePropNaming(propName: string): boolean { return /^[a-z][a-zA-Z0-9]*$/.test(propName) && !propName.startsWith('on') || /^on[A-Z][a-zA-Z0-9]*$/.test(propName); }"
          },
          "parameters": [
            {
              "name": "propName",
              "type": "string",
              "required": true,
              "description": "Prop name to validate"
            }
          ],
          "returnType": "boolean",
          "description": "Validates prop naming conventions (camelCase for props, onPascalCase for event handlers)"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "properties": {
        "strictMode": {
          "type": "boolean",
          "default": true,
          "description": "Whether to enforce all rules strictly"
        },
        "autoFix": {
          "type": "boolean",
          "default": false,
          "description": "Whether to automatically apply fixes where possible"
        },
        "ignoredRules": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of rule IDs to ignore"
        },
        "customRulePath": {
          "type": "string",
          "description": "Path to custom validation rules file"
        },
        "reportFormat": {
          "type": "string",
          "enum": ["json", "markdown", "html", "junit"],
          "default": "json",
          "description": "Output format for validation reports"
        },
        "failOnWarning": {
          "type": "boolean",
          "default": false,
          "description": "Whether warnings should cause validation to fail"
        }
      }
    }
  },
  "required": ["version", "rulesets"]
}