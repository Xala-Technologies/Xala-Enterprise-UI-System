{
  "metadata": {
    "name": "TimePicker",
    "version": "1.0.0",
    "category": "form",
    "description": "A time picker component for selecting time with Norwegian compliance and WCAG AAA accessibility",
    "tags": ["form", "time", "input", "picker", "accessibility"],
    "status": "stable",
    "maintainer": "Xala Enterprise UI Team"
  },
  "props": {
    "value": {
      "type": "string | Date | null",
      "required": false,
      "description": "Current time value in ISO format or Date object",
      "default": null,
      "examples": ["14:30:00", "2024-01-01T14:30:00Z", null]
    },
    "defaultValue": {
      "type": "string | Date | null",
      "required": false,
      "description": "Default time value for uncontrolled component",
      "default": null,
      "examples": ["09:00:00", "2024-01-01T09:00:00Z"]
    },
    "format": {
      "type": "'12h' | '24h'",
      "required": false,
      "description": "Time format (24h default for Norwegian compliance)",
      "default": "24h",
      "examples": ["24h", "12h"]
    },
    "minTime": {
      "type": "string | Date | null",
      "required": false,
      "description": "Minimum selectable time",
      "default": null,
      "examples": ["08:00:00", "2024-01-01T08:00:00Z"]
    },
    "maxTime": {
      "type": "string | Date | null",
      "required": false,
      "description": "Maximum selectable time",
      "default": null,
      "examples": ["18:00:00", "2024-01-01T18:00:00Z"]
    },
    "step": {
      "type": "number",
      "required": false,
      "description": "Minute step interval for time selection",
      "default": 15,
      "examples": [1, 5, 15, 30, 60],
      "validation": {
        "min": 1,
        "max": 60
      }
    },
    "showSeconds": {
      "type": "boolean",
      "required": false,
      "description": "Whether to show seconds in time picker",
      "default": false,
      "examples": [true, false]
    },
    "clearable": {
      "type": "boolean",
      "required": false,
      "description": "Whether time can be cleared",
      "default": true,
      "examples": [true, false]
    },
    "disabled": {
      "type": "boolean",
      "required": false,
      "description": "Whether time picker is disabled",
      "default": false,
      "examples": [true, false]
    },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "Placeholder text when no time is selected",
      "default": "Velg tid",
      "examples": ["Velg tid", "Select time", "HH:MM"]
    },
    "onChange": {
      "type": "(value: string | Date | null) => void",
      "required": false,
      "description": "Callback fired when time value changes",
      "examples": ["(time) => console.log(time)"]
    },
    "onBlur": {
      "type": "(event: React.FocusEvent) => void",
      "required": false,
      "description": "Callback fired when component loses focus",
      "examples": ["(event) => validateTime(event.target.value)"]
    },
    "onFocus": {
      "type": "(event: React.FocusEvent) => void",
      "required": false,
      "description": "Callback fired when component gains focus",
      "examples": ["(event) => trackFocus(event)"]
    },
    "name": {
      "type": "string",
      "required": false,
      "description": "HTML name attribute for form submission",
      "examples": ["startTime", "endTime", "meetingTime"]
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "HTML id attribute",
      "examples": ["start-time", "end-time"]
    },
    "className": {
      "type": "string",
      "required": false,
      "description": "Additional CSS classes",
      "examples": ["custom-time-picker", "large-picker"]
    },
    "ariaLabel": {
      "type": "string",
      "required": false,
      "description": "Accessible label for screen readers",
      "examples": ["Select meeting start time", "Choose appointment time"]
    },
    "ariaDescribedBy": {
      "type": "string",
      "required": false,
      "description": "References to elements that describe the time picker",
      "examples": ["time-help-text", "time-error-message"]
    },
    "required": {
      "type": "boolean",
      "required": false,
      "description": "Whether time selection is required",
      "default": false,
      "examples": [true, false]
    },
    "error": {
      "type": "boolean",
      "required": false,
      "description": "Whether component is in error state",
      "default": false,
      "examples": [true, false]
    },
    "helperText": {
      "type": "string",
      "required": false,
      "description": "Helper text displayed below the time picker",
      "examples": ["Select your preferred meeting time", "Time must be within business hours"]
    }
  },
  "accessibility": {
    "wcagLevel": "AAA",
    "features": [
      "Keyboard navigation with arrow keys",
      "Screen reader support with proper ARIA labels",
      "Focus management and visible focus indicators",
      "High contrast support",
      "Semantic HTML structure",
      "Error announcement for invalid times",
      "Time format announcement",
      "Clear instructions for keyboard users"
    ],
    "keyboardSupport": {
      "Tab": "Move focus to/from time picker",
      "Enter/Space": "Open time picker dropdown",
      "Arrow Up/Down": "Navigate through time options",
      "Arrow Left/Right": "Navigate between hours/minutes/seconds",
      "Home": "Jump to first available time",
      "End": "Jump to last available time",
      "Escape": "Close dropdown and return focus",
      "0-9": "Direct time input in focused field"
    },
    "ariaAttributes": [
      "aria-label",
      "aria-describedby",
      "aria-expanded",
      "aria-haspopup",
      "aria-invalid",
      "aria-required",
      "role=\"combobox\"",
      "role=\"listbox\"",
      "role=\"option\""
    ]
  },
  "norwegianCompliance": {
    "nsmClassification": "OPEN",
    "gdprCompliant": true,
    "wcagLevel": "AAA",
    "supportedLanguages": ["nb-NO", "en-US"],
    "auditTrail": false,
    "dataProcessing": {
      "personalData": false,
      "sensitiveData": false,
      "retention": "session",
      "encryption": "not-required"
    },
    "localization": {
      "defaultFormat": "24h",
      "timeZoneHandling": "local",
      "culturalConsiderations": [
        "Norwegian business hours (08:00-16:00)",
        "24-hour format preference",
        "Decimal time notation support"
      ]
    }
  },
  "styling": {
    "variants": {
      "size": ["sm", "md", "lg"],
      "variant": ["outlined", "filled", "standard"]
    },
    "customization": {
      "cssVariables": [
        "--time-picker-border-color",
        "--time-picker-focus-color",
        "--time-picker-background",
        "--time-picker-text-color",
        "--time-picker-disabled-opacity",
        "--time-picker-error-color"
      ],
      "themes": ["light", "dark", "high-contrast"]
    }
  },
  "examples": [
    {
      "name": "Basic Time Picker",
      "description": "Simple time picker with 24-hour format",
      "code": {
        "tsx": "import { TimePicker } from './TimePicker';\n\nexport const BasicExample = () => {\n  const [time, setTime] = useState<string | null>(null);\n  \n  return (\n    <TimePicker\n      value={time}\n      onChange={setTime}\n      placeholder=\"Velg tid\"\n      ariaLabel=\"Select meeting time\"\n    />\n  );\n};"
      },
      "props": {
        "format": "24h",
        "step": 15,
        "placeholder": "Velg tid"
      }
    },
    {
      "name": "Time Picker with Seconds",
      "description": "Time picker showing seconds for precise time selection",
      "code": {
        "tsx": "import { TimePicker } from './TimePicker';\n\nexport const WithSecondsExample = () => {\n  const [time, setTime] = useState<string>('14:30:45');\n  \n  return (\n    <TimePicker\n      value={time}\n      onChange={setTime}\n      showSeconds={true}\n      step={1}\n      ariaLabel=\"Select precise time with seconds\"\n    />\n  );\n};"
      },
      "props": {
        "showSeconds": true,
        "step": 1,
        "value": "14:30:45"
      }
    },
    {
      "name": "Time Range Constraints",
      "description": "Time picker with minimum and maximum time constraints",
      "code": {
        "tsx": "import { TimePicker } from './TimePicker';\n\nexport const TimeRangeExample = () => {\n  const [time, setTime] = useState<string | null>(null);\n  \n  return (\n    <TimePicker\n      value={time}\n      onChange={setTime}\n      minTime=\"08:00:00\"\n      maxTime=\"18:00:00\"\n      step={30}\n      placeholder=\"Business hours only\"\n      helperText=\"Time must be between 08:00 and 18:00\"\n      ariaLabel=\"Select time within business hours\"\n    />\n  );\n};"
      },
      "props": {
        "minTime": "08:00:00",
        "maxTime": "18:00:00",
        "step": 30
      }
    },
    {
      "name": "Step Intervals",
      "description": "Time picker with different step intervals for minutes",
      "code": {
        "tsx": "import { TimePicker } from './TimePicker';\n\nexport const StepIntervalsExample = () => {\n  const [time, setTime] = useState<string | null>(null);\n  \n  return (\n    <div className=\"space-y-4\">\n      <TimePicker\n        value={time}\n        onChange={setTime}\n        step={5}\n        placeholder=\"5-minute intervals\"\n        ariaLabel=\"Select time in 5-minute intervals\"\n      />\n      <TimePicker\n        value={time}\n        onChange={setTime}\n        step={15}\n        placeholder=\"15-minute intervals\"\n        ariaLabel=\"Select time in 15-minute intervals\"\n      />\n      <TimePicker\n        value={time}\n        onChange={setTime}\n        step={30}\n        placeholder=\"30-minute intervals\"\n        ariaLabel=\"Select time in 30-minute intervals\"\n      />\n    </div>\n  );\n};"
      },
      "props": {
        "step": [5, 15, 30]
      }
    },
    {
      "name": "Form Integration",
      "description": "Time picker integrated with form validation",
      "code": {
        "tsx": "import { TimePicker } from './TimePicker';\nimport { useState } from 'react';\n\nexport const FormExample = () => {\n  const [startTime, setStartTime] = useState<string | null>(null);\n  const [endTime, setEndTime] = useState<string | null>(null);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  \n  const validateTimes = () => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!startTime) {\n      newErrors.startTime = 'Start time is required';\n    }\n    \n    if (!endTime) {\n      newErrors.endTime = 'End time is required';\n    }\n    \n    if (startTime && endTime && startTime >= endTime) {\n      newErrors.endTime = 'End time must be after start time';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  return (\n    <form onSubmit={(e) => { e.preventDefault(); validateTimes(); }}>\n      <div className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"start-time\">Start Time</label>\n          <TimePicker\n            id=\"start-time\"\n            name=\"startTime\"\n            value={startTime}\n            onChange={setStartTime}\n            required={true}\n            error={!!errors.startTime}\n            helperText={errors.startTime}\n            ariaDescribedBy={errors.startTime ? 'start-time-error' : undefined}\n            ariaLabel=\"Select meeting start time\"\n          />\n          {errors.startTime && (\n            <div id=\"start-time-error\" role=\"alert\" className=\"text-red-600\">\n              {errors.startTime}\n            </div>\n          )}\n        </div>\n        \n        <div>\n          <label htmlFor=\"end-time\">End Time</label>\n          <TimePicker\n            id=\"end-time\"\n            name=\"endTime\"\n            value={endTime}\n            onChange={setEndTime}\n            minTime={startTime || undefined}\n            required={true}\n            error={!!errors.endTime}\n            helperText={errors.endTime}\n            ariaDescribedBy={errors.endTime ? 'end-time-error' : undefined}\n            ariaLabel=\"Select meeting end time\"\n          />\n          {errors.endTime && (\n            <div id=\"end-time-error\" role=\"alert\" className=\"text-red-600\">\n              {errors.endTime}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <button type=\"submit\">Schedule Meeting</button>\n    </form>\n  );\n};"
      },
      "props": {
        "required": true,
        "error": true,
        "helperText": "Validation messages"
      }
    }
  ],
  "performance": {
    "bundleSize": "<4KB",
    "renderTime": "<16ms",
    "memoryUsage": "<2MB",
    "optimization": [
      "Lazy loading of time options",
      "Virtualized dropdown for large time ranges",
      "Memoized time calculations",
      "Efficient keyboard navigation",
      "Minimal re-renders"
    ]
  },
  "testing": {
    "coverage": "100%",
    "testTypes": [
      "Unit tests for time parsing and formatting",
      "Integration tests with forms",
      "Accessibility tests with screen readers",
      "Keyboard navigation tests",
      "Norwegian compliance validation",
      "Performance benchmarks",
      "Visual regression tests"
    ],
    "scenarios": [
      "Time selection and validation",
      "Keyboard navigation through options",
      "Screen reader announcements",
      "Form integration and submission",
      "Error handling and recovery",
      "Time range constraints",
      "Different step intervals",
      "12h vs 24h format switching"
    ]
  },
  "dependencies": {
    "external": [],
    "internal": [
      "@xala-technologies/enterprise-standards",
      "react",
      "date-fns"
    ],
    "devDependencies": [
      "@testing-library/react",
      "@testing-library/jest-dom",
      "@testing-library/user-event"
    ]
  },
  "changeLog": [
    {
      "version": "1.0.0",
      "date": "2024-01-01",
      "changes": [
        "Initial TimePicker component implementation",
        "WCAG AAA accessibility compliance",
        "Norwegian NSM OPEN classification",
        "24-hour format default for Norwegian users",
        "Comprehensive keyboard navigation",
        "Form integration support"
      ]
    }
  ]
}