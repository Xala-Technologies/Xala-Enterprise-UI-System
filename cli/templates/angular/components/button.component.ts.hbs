import { Component, Input, forwardRef } from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import { cva, type VariantProps } from 'class-variance-authority';

const buttonVariants = cva(
  [
    'inline-flex',
    'items-center',
    'justify-center',
    'whitespace-nowrap',
    'rounded-md',
    'text-sm',
    'font-medium',
    'transition-colors',
    'focus-visible:outline-none',
    'focus-visible:ring-2',
    'focus-visible:ring-ring',
    'focus-visible:ring-offset-2',
    'disabled:pointer-events-none',
    'disabled:opacity-50',
  ],
  {
    variants: {
      variant: {
        primary: [
          'bg-primary',
          'text-primary-foreground',
          'hover:bg-primary/90',
        ],
        secondary: [
          'bg-secondary',
          'text-secondary-foreground',
          'hover:bg-secondary/80',
        ],
        destructive: [
          'bg-destructive',
          'text-destructive-foreground',
          'hover:bg-destructive/90',
        ],
        outline: [
          'border',
          'border-input',
          'bg-background',
          'hover:bg-accent',
          'hover:text-accent-foreground',
        ],
        ghost: [
          'hover:bg-accent',
          'hover:text-accent-foreground',
        ],
        link: [
          'text-primary',
          'underline-offset-4',
          'hover:underline',
        ],
      },
      size: {
        sm: ['h-9', 'px-3'],
        md: ['h-10', 'px-4', 'py-2'],
        lg: ['h-11', 'px-8'],
        xl: ['h-12', 'px-10'],
        icon: ['h-10', 'w-10'],
      },
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md',
    },
  }
);

export interface ButtonProps extends VariantProps<typeof buttonVariants> {
  readonly class?: string;
  readonly disabled?: boolean;
}

@Component({
  selector: 'xala-button',
  standalone: true,
  template: `
    <button
      [class]="buttonClasses"
      [disabled]="disabled"
      [attr.aria-disabled]="disabled"
    >
      <ng-content></ng-content>
    </button>
  `,
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => ButtonComponent),
      multi: true,
    },
  ],
})
export class ButtonComponent implements ControlValueAccessor, ButtonProps {
  @Input() variant: ButtonProps['variant'] = 'primary';
  @Input() size: ButtonProps['size'] = 'md';
  @Input() class?: string;
  @Input() disabled?: boolean = false;

  get buttonClasses(): string {
    return buttonVariants({
      variant: this.variant,
      size: this.size,
      class: this.class,
    });
  }

  // ControlValueAccessor implementation
  private _value: any = '';
  private _onChange = (_: any) => {};
  private _onTouched = () => {};

  writeValue(value: any): void {
    this._value = value;
  }

  registerOnChange(fn: any): void {
    this._onChange = fn;
  }

  registerOnTouched(fn: any): void {
    this._onTouched = fn;
  }

  setDisabledState(isDisabled: boolean): void {
    this.disabled = isDisabled;
  }
}