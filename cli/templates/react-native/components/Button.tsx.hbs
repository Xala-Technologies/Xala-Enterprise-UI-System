import React from 'react';
import { 
  TouchableOpacity, 
  Text, 
  StyleSheet, 
  ViewStyle, 
  TextStyle,
  TouchableOpacityProps 
} from 'react-native';
import { cva, type VariantProps } from 'class-variance-authority';

const buttonVariants = cva('', {
  variants: {
    variant: {
      primary: 'primary',
      secondary: 'secondary',
      destructive: 'destructive',
      outline: 'outline',
      ghost: 'ghost',
      link: 'link',
    },
    size: {
      sm: 'sm',
      md: 'md',
      lg: 'lg',
      xl: 'xl',
      icon: 'icon',
    },
  },
  defaultVariants: {
    variant: 'primary',
    size: 'md',
  },
});

interface ButtonProps extends TouchableOpacityProps, VariantProps<typeof buttonVariants> {
  readonly children: React.ReactNode;
  readonly disabled?: boolean;
}

export const Button = React.forwardRef<TouchableOpacity, ButtonProps>(
  ({ children, variant = 'primary', size = 'md', disabled = false, style, ...props }, ref) => {
    const getButtonStyle = (): ViewStyle => {
      const baseStyle: ViewStyle = {
        alignItems: 'center',
        justifyContent: 'center',
        borderRadius: 8,
        flexDirection: 'row',
      };

      // Size styles
      const sizeStyles: Record<string, ViewStyle> = {
        sm: { paddingHorizontal: 12, paddingVertical: 6, minHeight: 36 },
        md: { paddingHorizontal: 16, paddingVertical: 8, minHeight: 40 },
        lg: { paddingHorizontal: 20, paddingVertical: 12, minHeight: 44 },
        xl: { paddingHorizontal: 24, paddingVertical: 16, minHeight: 48 },
        icon: { width: 40, height: 40, paddingHorizontal: 0, paddingVertical: 0 },
      };

      // Variant styles
      const variantStyles: Record<string, ViewStyle> = {
        primary: {
          backgroundColor: '#3B82F6',
          ...(disabled && { backgroundColor: '#9CA3AF' }),
        },
        secondary: {
          backgroundColor: '#6B7280',
          ...(disabled && { backgroundColor: '#D1D5DB' }),
        },
        destructive: {
          backgroundColor: '#EF4444',
          ...(disabled && { backgroundColor: '#FCA5A5' }),
        },
        outline: {
          backgroundColor: 'transparent',
          borderWidth: 1,
          borderColor: '#D1D5DB',
          ...(disabled && { borderColor: '#E5E7EB' }),
        },
        ghost: {
          backgroundColor: 'transparent',
          ...(disabled && { backgroundColor: '#F3F4F6' }),
        },
        link: {
          backgroundColor: 'transparent',
        },
      };

      return {
        ...baseStyle,
        ...sizeStyles[size || 'md'],
        ...variantStyles[variant || 'primary'],
      };
    };

    const getTextStyle = (): TextStyle => {
      const baseStyle: TextStyle = {
        fontWeight: '500',
        textAlign: 'center',
      };

      // Size text styles
      const sizeTextStyles: Record<string, TextStyle> = {
        sm: { fontSize: 14 },
        md: { fontSize: 16 },
        lg: { fontSize: 18 },
        xl: { fontSize: 20 },
        icon: { fontSize: 16 },
      };

      // Variant text styles
      const variantTextStyles: Record<string, TextStyle> = {
        primary: {
          color: '#FFFFFF',
          ...(disabled && { color: '#E5E7EB' }),
        },
        secondary: {
          color: '#FFFFFF',
          ...(disabled && { color: '#9CA3AF' }),
        },
        destructive: {
          color: '#FFFFFF',
          ...(disabled && { color: '#FCA5A5' }),
        },
        outline: {
          color: '#374151',
          ...(disabled && { color: '#9CA3AF' }),
        },
        ghost: {
          color: '#374151',
          ...(disabled && { color: '#9CA3AF' }),
        },
        link: {
          color: '#3B82F6',
          textDecorationLine: 'underline',
          ...(disabled && { color: '#9CA3AF' }),
        },
      };

      return {
        ...baseStyle,
        ...sizeTextStyles[size || 'md'],
        ...variantTextStyles[variant || 'primary'],
      };
    };

    return (
      <TouchableOpacity
        ref={ref}
        style={[getButtonStyle(), style]}
        disabled={disabled}
        activeOpacity={0.7}
        {...props}
      >
        {typeof children === 'string' ? (
          <Text style={getTextStyle()}>{children}</Text>
        ) : (
          children
        )}
      </TouchableOpacity>
    );
  }
);

Button.displayName = 'Button';