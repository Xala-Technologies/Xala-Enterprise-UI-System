/**
 * @fileoverview {{componentName}} - Enterprise SaaS Application Shell
 * @description Complete application shell for SaaS with sidebar, header, and content areas
 * @version 5.0.0
 * @compliance SSR-Safe, Token-based, WCAG AAA, Pure presentational
 */

import { cn } from '@/lib/utils/cn';
import { cva, type VariantProps } from 'class-variance-authority';
import React, { forwardRef } from 'react';

const {{camelCase componentName}}Variants = cva(
  'min-h-screen bg-background',
  {
    variants: {
      layout: {
        default: 'flex flex-col',
        sidebar: 'flex flex-row',
        stacked: 'flex flex-col',
        dashboard: 'grid grid-cols-[auto_1fr]',
      },
      sidebarPosition: {
        left: 'flex-row',
        right: 'flex-row-reverse',
      },
      sidebarBehavior: {
        static: '',
        collapsible: '',
        overlay: '',
        responsive: '',
      },
    },
    defaultVariants: {
      layout: 'sidebar',
      sidebarPosition: 'left',
      sidebarBehavior: 'responsive',
    },
  }
);

export interface NavigationItem {
  readonly id: string;
  readonly label: string;
  readonly href?: string;
  readonly icon?: React.ReactNode;
  readonly badge?: string | number;
  readonly children?: ReadonlyArray<NavigationItem>;
  readonly disabled?: boolean;
}

export interface {{componentName}}Props
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof {{camelCase componentName}}Variants> {
  // Header props
  readonly logo?: React.ReactNode;
  readonly appName?: string;
  readonly headerActions?: React.ReactNode;
  readonly userMenu?: React.ReactNode;
  readonly searchBar?: React.ReactNode;
  readonly notifications?: React.ReactNode;
  
  // Sidebar props
  readonly navigation?: ReadonlyArray<NavigationItem>;
  readonly sidebarHeader?: React.ReactNode;
  readonly sidebarFooter?: React.ReactNode;
  readonly sidebarCollapsed?: boolean;
  readonly onSidebarToggle?: () => void;
  readonly activeNavId?: string;
  readonly onNavClick?: (item: NavigationItem) => void;
  
  // Content props
  readonly breadcrumbs?: React.ReactNode;
  readonly pageTitle?: string;
  readonly pageActions?: React.ReactNode;
  readonly footer?: React.ReactNode;
  
  // Layout props
  readonly contentMaxWidth?: string;
  readonly showMobileMenu?: boolean;
  readonly onMobileMenuToggle?: () => void;
  
  readonly 'data-testid'?: string;
}

/**
 * Complete application shell for SaaS applications
 * Pure presentational component - parent handles all state
 */
export const {{componentName}} = forwardRef<HTMLDivElement, {{componentName}}Props>(
  (
    {
      children,
      className,
      // Header props
      logo,
      appName,
      headerActions,
      userMenu,
      searchBar,
      notifications,
      // Sidebar props
      navigation = [],
      sidebarHeader,
      sidebarFooter,
      sidebarCollapsed = false,
      onSidebarToggle,
      activeNavId,
      onNavClick,
      // Content props
      breadcrumbs,
      pageTitle,
      pageActions,
      footer,
      // Layout props
      layout,
      sidebarPosition,
      sidebarBehavior,
      contentMaxWidth = '1280px',
      showMobileMenu = false,
      onMobileMenuToggle,
      'data-testid': testId,
      ...props
    },
    ref
  ) => {
    const renderNavigationItem = (item: NavigationItem, level = 0) => {
      const isActive = item.id === activeNavId;
      const hasChildren = item.children && item.children.length > 0;

      return (
        <div key={item.id} className={cn(level > 0 && 'ml-4')}>
          <button
            className={cn(
              'w-full flex items-center gap-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors',
              'hover:bg-accent hover:text-accent-foreground',
              isActive && 'bg-primary/10 text-primary',
              item.disabled && 'opacity-50 cursor-not-allowed',
              sidebarCollapsed && level === 0 && 'justify-center px-2'
            )}
            onClick={() => !item.disabled && onNavClick?.(item)}
            disabled={item.disabled}
            aria-current={isActive ? 'page' : undefined}
          >
            {item.icon && (
              <span className="flex-shrink-0">{item.icon}</span>
            )}
            {!sidebarCollapsed && (
              <>
                <span className="flex-1 text-left truncate">{item.label}</span>
                {item.badge && (
                  <span className="ml-auto bg-primary/20 text-primary text-xs px-2 py-0.5 rounded-full">
                    {item.badge}
                  </span>
                )}
                {hasChildren && (
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                )}
              </>
            )}
          </button>
          {!sidebarCollapsed && hasChildren && (
            <div className="mt-1 space-y-1">
              {item.children!.map(child => renderNavigationItem(child, level + 1))}
            </div>
          )}
        </div>
      );
    };

    const sidebarWidth = sidebarCollapsed ? 'w-16' : 'w-64';
    const sidebarClasses = cn(
      sidebarWidth,
      'bg-card border-r border-border flex flex-col h-screen',
      sidebarBehavior === 'overlay' && 'fixed left-0 top-0 z-40',
      sidebarBehavior === 'responsive' && 'hidden lg:flex',
      showMobileMenu && sidebarBehavior === 'responsive' && 'flex fixed left-0 top-0 z-40'
    );

    return (
      <div
        ref={ref}
        className={cn({{camelCase componentName}}Variants({ layout, sidebarPosition, sidebarBehavior }), className)}
        data-testid={testId}
        {...props}
      >
        {/* Mobile Menu Overlay */}
        {showMobileMenu && sidebarBehavior === 'responsive' && (
          <div
            className="fixed inset-0 bg-black/50 z-30 lg:hidden"
            onClick={onMobileMenuToggle}
            aria-hidden="true"
          />
        )}

        {/* Sidebar */}
        {(layout === 'sidebar' || layout === 'dashboard') && navigation.length > 0 && (
          <aside className={sidebarClasses}>
            {/* Sidebar Header */}
            <div className="p-4 border-b border-border">
              {sidebarHeader || (
                <div className="flex items-center justify-between">
                  {!sidebarCollapsed && (
                    <>
                      {logo && <div className="flex-shrink-0">{logo}</div>}
                      {appName && <span className="font-semibold text-lg">{appName}</span>}
                    </>
                  )}
                  <button
                    onClick={onSidebarToggle}
                    className="p-2 hover:bg-accent rounded-lg transition-colors"
                    aria-label={sidebarCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                        d={sidebarCollapsed ? "M13 5l7 7-7 7" : "M11 19l-7-7 7-7"} />
                    </svg>
                  </button>
                </div>
              )}
            </div>

            {/* Navigation */}
            <nav className="flex-1 overflow-y-auto p-4 space-y-1">
              {navigation.map(item => renderNavigationItem(item))}
            </nav>

            {/* Sidebar Footer */}
            {sidebarFooter && (
              <div className="p-4 border-t border-border">
                {sidebarFooter}
              </div>
            )}
          </aside>
        )}

        {/* Main Content Area */}
        <div className="flex-1 flex flex-col min-h-screen">
          {/* Header */}
          <header className="sticky top-0 z-20 bg-background border-b border-border">
            <div className="flex items-center justify-between h-16 px-4 lg:px-6">
              {/* Left Section */}
              <div className="flex items-center gap-4">
                {/* Mobile Menu Toggle */}
                {sidebarBehavior === 'responsive' && (
                  <button
                    onClick={onMobileMenuToggle}
                    className="p-2 hover:bg-accent rounded-lg transition-colors lg:hidden"
                    aria-label="Toggle mobile menu"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                        d="M4 6h16M4 12h16M4 18h16" />
                    </svg>
                  </button>
                )}
                
                {/* Logo/App Name for non-sidebar layouts */}
                {layout !== 'sidebar' && layout !== 'dashboard' && (
                  <>
                    {logo && <div className="flex-shrink-0">{logo}</div>}
                    {appName && <span className="font-semibold text-lg">{appName}</span>}
                  </>
                )}

                {/* Search Bar */}
                {searchBar && <div className="hidden md:block">{searchBar}</div>}
              </div>

              {/* Right Section */}
              <div className="flex items-center gap-4">
                {headerActions}
                {notifications}
                {userMenu}
              </div>
            </div>
          </header>

          {/* Page Header */}
          {(breadcrumbs || pageTitle || pageActions) && (
            <div className="bg-background border-b border-border">
              <div className={cn('px-4 lg:px-6 py-4', contentMaxWidth && `max-w-[${contentMaxWidth}] mx-auto`)}>
                {breadcrumbs && (
                  <nav className="text-sm text-muted-foreground mb-2">
                    {breadcrumbs}
                  </nav>
                )}
                <div className="flex items-center justify-between">
                  {pageTitle && (
                    <h1 className="text-2xl font-bold text-foreground">{pageTitle}</h1>
                  )}
                  {pageActions && (
                    <div className="flex items-center gap-2">
                      {pageActions}
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Main Content */}
          <main className="flex-1 overflow-y-auto">
            <div className={cn('p-4 lg:p-6', contentMaxWidth && `max-w-[${contentMaxWidth}] mx-auto`)}>
              {children}
            </div>
          </main>

          {/* Footer */}
          {footer && (
            <footer className="bg-background border-t border-border mt-auto">
              <div className={cn('px-4 lg:px-6 py-4', contentMaxWidth && `max-w-[${contentMaxWidth}] mx-auto`)}>
                {footer}
              </div>
            </footer>
          )}
        </div>
      </div>
    );
  }
);

{{componentName}}.displayName = '{{componentName}}';