/**
 * @fileoverview {{componentName}} - Enterprise Command Palette
 * @description AI-powered command palette with fuzzy search and actions
 * @version 5.0.0
 * @compliance Pure component, SSR-safe, WCAG AAA, No hooks
 */

import { cn } from '@/lib/utils/cn';
import { cva, type VariantProps } from 'class-variance-authority';
import React, { forwardRef } from 'react';

const {{camelCase componentName}}Variants = cva(
  'fixed inset-0 z-50 flex items-start justify-center pt-[20vh] px-4',
  {
    variants: {
      size: {
        sm: 'max-w-sm',
        md: 'max-w-2xl',
        lg: 'max-w-4xl',
        full: 'max-w-full',
      },
    },
    defaultVariants: {
      size: 'md',
    },
  }
);

const commandItemVariants = cva(
  'flex items-center gap-3 px-4 py-3 text-sm cursor-pointer transition-colors',
  {
    variants: {
      selected: {
        true: 'bg-accent text-accent-foreground',
        false: 'hover:bg-accent/50',
      },
      disabled: {
        true: 'opacity-50 cursor-not-allowed',
        false: '',
      },
    },
    defaultVariants: {
      selected: false,
      disabled: false,
    },
  }
);

export interface CommandItem {
  readonly id: string;
  readonly label: string;
  readonly description?: string;
  readonly icon?: React.ReactNode;
  readonly shortcut?: string;
  readonly category?: string;
  readonly keywords?: string[];
  readonly action?: () => void;
  readonly href?: string;
  readonly disabled?: boolean;
  readonly badge?: string;
  readonly aiScore?: number;
}

export interface CommandGroup {
  readonly id: string;
  readonly label: string;
  readonly items: CommandItem[];
}

export interface {{componentName}}Props
  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>,
    VariantProps<typeof {{camelCase componentName}}Variants> {
  readonly isOpen: boolean;
  readonly onOpenChange?: (open: boolean) => void;
  readonly items?: CommandItem[];
  readonly groups?: CommandGroup[];
  readonly searchValue?: string;
  readonly onSearchChange?: (value: string) => void;
  readonly selectedIndex?: number;
  readonly onSelectedIndexChange?: (index: number) => void;
  readonly onItemSelect?: (item: CommandItem) => void;
  readonly placeholder?: string;
  readonly emptyMessage?: string;
  readonly showRecent?: boolean;
  readonly recentItems?: CommandItem[];
  readonly showAISuggestions?: boolean;
  readonly aiSuggestions?: CommandItem[];
  readonly showCategories?: boolean;
  readonly maxDisplayItems?: number;
  readonly 'data-testid'?: string;
}

/**
 * Pure presentational command palette
 * Parent handles all state, search logic, and keyboard navigation
 */
export const {{componentName}} = forwardRef<HTMLDivElement, {{componentName}}Props>(
  (
    {
      className,
      isOpen,
      onOpenChange,
      items = [],
      groups = [],
      searchValue = '',
      onSearchChange,
      selectedIndex = 0,
      onSelectedIndexChange,
      onItemSelect,
      placeholder = 'Type a command or search...',
      emptyMessage = 'No results found',
      showRecent = false,
      recentItems = [],
      showAISuggestions = false,
      aiSuggestions = [],
      showCategories = true,
      maxDisplayItems = 10,
      size,
      'data-testid': testId,
      ...props
    },
    ref
  ) => {
    if (!isOpen) return null;

    // Flatten all items for display
    const allItems = groups.length > 0
      ? groups.flatMap(g => g.items)
      : items;

    // Get display items (filtered by parent)
    const displayItems = allItems.slice(0, maxDisplayItems);

    // Render command item
    const renderItem = (item: CommandItem, index: number, groupLabel?: string) => {
      const isSelected = index === selectedIndex;

      return (
        <div
          key={item.id}
          className={cn(commandItemVariants({ selected: isSelected, disabled: item.disabled }))}
          onClick={() => !item.disabled && onItemSelect?.(item)}
          role="option"
          aria-selected={isSelected}
          aria-disabled={item.disabled}
          data-index={index}
        >
          {item.icon && (
            <span className="flex-shrink-0 w-5 h-5 text-muted-foreground">
              {item.icon}
            </span>
          )}
          
          <div className="flex-1 min-w-0">
            <div className="flex items-center gap-2">
              <span className="font-medium truncate">{item.label}</span>
              {item.badge && (
                <span className="px-1.5 py-0.5 text-xs font-medium bg-primary/10 text-primary rounded">
                  {item.badge}
                </span>
              )}
              {item.aiScore && showAISuggestions && (
                <span className="px-1.5 py-0.5 text-xs font-medium bg-purple-100 text-purple-700 rounded">
                  AI: {Math.round(item.aiScore * 100)}%
                </span>
              )}
            </div>
            {item.description && (
              <p className="text-xs text-muted-foreground truncate mt-0.5">
                {item.description}
              </p>
            )}
          </div>

          {item.shortcut && (
            <kbd className="flex-shrink-0 pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-xs font-medium text-muted-foreground">
              {item.shortcut.split('+').map((key, i) => (
                <span key={i} className={i > 0 ? 'text-xs' : ''}>
                  {key}
                </span>
              ))}
            </kbd>
          )}
        </div>
      );
    };

    return (
      <>
        {/* Backdrop */}
        <div
          className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
          onClick={() => onOpenChange?.(false)}
          aria-hidden="true"
        />

        {/* Command Palette */}
        <div
          ref={ref}
          className={cn({{camelCase componentName}}Variants({ size }), 'z-50', className)}
          data-testid={testId}
          {...props}
        >
          <div className="w-full bg-background border border-border rounded-lg shadow-2xl overflow-hidden">
            {/* Search Input */}
            <div className="flex items-center border-b border-border px-4 h-14">
              <svg
                className="w-5 h-5 text-muted-foreground mr-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                />
              </svg>
              <input
                type="text"
                value={searchValue}
                onChange={(e) => onSearchChange?.(e.target.value)}
                placeholder={placeholder}
                className="flex-1 bg-transparent outline-none text-foreground placeholder:text-muted-foreground"
                autoFocus
                aria-label="Command search"
                aria-autocomplete="list"
                aria-controls="command-list"
                role="combobox"
                aria-expanded="true"
              />
              <kbd className="pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-xs font-medium text-muted-foreground">
                ESC
              </kbd>
            </div>

            {/* Results */}
            <div
              id="command-list"
              className="max-h-[400px] overflow-y-auto overscroll-contain"
              role="listbox"
              aria-label="Command results"
            >
              {/* AI Suggestions */}
              {showAISuggestions && aiSuggestions.length > 0 && (
                <div className="px-2 py-2">
                  <div className="px-2 py-1.5 text-xs font-medium text-muted-foreground">
                    AI Suggestions
                  </div>
                  {aiSuggestions.map((item, i) => renderItem(item, i))}
                </div>
              )}

              {/* Recent Items */}
              {showRecent && recentItems.length > 0 && searchValue === '' && (
                <div className="px-2 py-2">
                  <div className="px-2 py-1.5 text-xs font-medium text-muted-foreground">
                    Recent
                  </div>
                  {recentItems.map((item, i) => renderItem(item, i))}
                </div>
              )}

              {/* Grouped Results */}
              {groups.length > 0 ? (
                groups.map((group) => (
                  <div key={group.id} className="px-2 py-2">
                    {showCategories && (
                      <div className="px-2 py-1.5 text-xs font-medium text-muted-foreground">
                        {group.label}
                      </div>
                    )}
                    {group.items.map((item, i) => renderItem(item, i, group.label))}
                  </div>
                ))
              ) : displayItems.length > 0 ? (
                <div className="px-2 py-2">
                  {displayItems.map((item, i) => renderItem(item, i))}
                </div>
              ) : (
                <div className="px-4 py-8 text-center text-sm text-muted-foreground">
                  {emptyMessage}
                </div>
              )}
            </div>

            {/* Footer */}
            <div className="flex items-center justify-between border-t border-border px-4 py-2 text-xs text-muted-foreground">
              <div className="flex items-center gap-4">
                <span className="flex items-center gap-1">
                  <kbd className="pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-xs font-medium">
                    ↑↓
                  </kbd>
                  Navigate
                </span>
                <span className="flex items-center gap-1">
                  <kbd className="pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-xs font-medium">
                    ↵
                  </kbd>
                  Select
                </span>
              </div>
              {showAISuggestions && (
                <span className="text-purple-600">
                  AI-Powered
                </span>
              )}
            </div>
          </div>
        </div>
      </>
    );
  }
);

{{componentName}}.displayName = '{{componentName}}';