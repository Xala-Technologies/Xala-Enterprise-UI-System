/**
 * @fileoverview {{componentName}} - Enterprise Error Boundary
 * @description Production-ready error boundary with telemetry
 * @version 5.0.0
 * @compliance Enterprise Standards, Error Handling, Telemetry
 */

'use client';

import React, { Component, ErrorInfo, ReactNode } from 'react';

export interface ErrorDetails {
  readonly message: string;
  readonly stack?: string;
  readonly componentStack?: string;
  readonly timestamp: number;
  readonly url: string;
  readonly userAgent: string;
  readonly errorBoundary?: string;
  readonly metadata?: Record<string, any>;
}

export interface {{componentName}}Props {
  readonly children: ReactNode;
  readonly fallback?: ReactNode | ((error: Error, errorInfo: ErrorInfo) => ReactNode);
  readonly onError?: (error: Error, errorInfo: ErrorInfo, errorDetails: ErrorDetails) => void;
  readonly resetKeys?: ReadonlyArray<string | number>;
  readonly resetOnPropsChange?: boolean;
  readonly isolate?: boolean;
  readonly level?: 'page' | 'section' | 'component';
  readonly enableTelemetry?: boolean;
  readonly telemetryEndpoint?: string;
  readonly showErrorDetails?: boolean;
  readonly customErrorComponent?: React.ComponentType<{ error: Error; reset: () => void }>;
}

interface {{componentName}}State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
  errorCount: number;
  lastErrorTimestamp: number | null;
}

/**
 * Enterprise-grade error boundary with telemetry and recovery
 * Catches JavaScript errors anywhere in child component tree
 */
export class {{componentName}} extends Component<{{componentName}}Props, {{componentName}}State> {
  private resetTimeoutId: NodeJS.Timeout | null = null;
  private previousResetKeys: ReadonlyArray<string | number> = [];

  constructor(props: {{componentName}}Props) {
    super(props);
    
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null,
      errorCount: 0,
      lastErrorTimestamp: null,
    };
  }

  static getDerivedStateFromProps(
    props: {{componentName}}Props,
    state: {{componentName}}State
  ): Partial<{{componentName}}State> | null {
    // Reset error boundary when resetKeys change
    if (props.resetKeys && props.resetOnPropsChange) {
      return { hasError: false, error: null, errorInfo: null };
    }
    return null;
  }

  componentDidMount() {
    // Add global error handler for unhandled promise rejections
    if (this.props.level === 'page') {
      window.addEventListener('unhandledrejection', this.handleUnhandledRejection);
    }
  }

  componentWillUnmount() {
    if (this.resetTimeoutId) {
      clearTimeout(this.resetTimeoutId);
    }
    
    if (this.props.level === 'page') {
      window.removeEventListener('unhandledrejection', this.handleUnhandledRejection);
    }
  }

  componentDidUpdate(prevProps: {{componentName}}Props) {
    const { resetKeys, resetOnPropsChange } = this.props;
    
    if (resetKeys && resetOnPropsChange && prevProps.resetKeys !== resetKeys) {
      const hasResetKeyChanged = resetKeys.some(
        (key, index) => key !== this.previousResetKeys[index]
      );
      
      if (hasResetKeyChanged) {
        this.previousResetKeys = [...resetKeys];
        this.resetErrorBoundary();
      }
    }
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    const errorDetails: ErrorDetails = {
      message: error.message,
      stack: error.stack,
      componentStack: errorInfo.componentStack,
      timestamp: Date.now(),
      url: typeof window !== 'undefined' ? window.location.href : '',
      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',
      errorBoundary: this.props.level || 'component',
      metadata: {
        errorCount: this.state.errorCount + 1,
        isolate: this.props.isolate,
      },
    };

    // Log to console in development
    if (process.env.NODE_ENV === 'development') {
      console.error('Error caught by ErrorBoundary:', error);
      console.error('Error Info:', errorInfo);
      console.error('Error Details:', errorDetails);
    }

    // Send telemetry if enabled
    if (this.props.enableTelemetry && this.props.telemetryEndpoint) {
      this.sendTelemetry(errorDetails);
    }

    // Call custom error handler
    if (this.props.onError) {
      this.props.onError(error, errorInfo, errorDetails);
    }

    // Update state
    this.setState(prevState => ({
      hasError: true,
      error,
      errorInfo,
      errorCount: prevState.errorCount + 1,
      lastErrorTimestamp: Date.now(),
    }));

    // Auto-reset after multiple errors (circuit breaker pattern)
    if (this.state.errorCount >= 3) {
      this.scheduleReset(5000); // Reset after 5 seconds
    }
  }

  private handleUnhandledRejection = (event: PromiseRejectionEvent) => {
    const error = new Error(
      event.reason?.message || event.reason || 'Unhandled Promise Rejection'
    );
    
    const errorInfo: ErrorInfo = {
      componentStack: '',
    };
    
    this.componentDidCatch(error, errorInfo);
  };

  private sendTelemetry = async (errorDetails: ErrorDetails) => {
    try {
      await fetch(this.props.telemetryEndpoint!, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(errorDetails),
      });
    } catch (telemetryError) {
      console.error('Failed to send error telemetry:', telemetryError);
    }
  };

  private scheduleReset = (delay: number) => {
    if (this.resetTimeoutId) {
      clearTimeout(this.resetTimeoutId);
    }
    
    this.resetTimeoutId = setTimeout(() => {
      this.resetErrorBoundary();
    }, delay);
  };

  public resetErrorBoundary = () => {
    if (this.resetTimeoutId) {
      clearTimeout(this.resetTimeoutId);
      this.resetTimeoutId = null;
    }
    
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null,
      errorCount: 0,
      lastErrorTimestamp: null,
    });
  };

  private renderDefaultFallback = () => {
    const { error, errorInfo, errorCount } = this.state;
    const { showErrorDetails, level } = this.props;

    return (
      <div className="min-h-[400px] flex items-center justify-center p-8">
        <div className="max-w-md w-full bg-background border border-destructive/20 rounded-lg p-6 space-y-4">
          <div className="flex items-start space-x-3">
            <svg
              className="w-6 h-6 text-destructive flex-shrink-0 mt-0.5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
              />
            </svg>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-foreground">
                {level === 'page' ? 'Something went wrong' : 'Component Error'}
              </h3>
              <p className="mt-1 text-sm text-muted-foreground">
                {level === 'page'
                  ? 'An unexpected error occurred. The application has been notified.'
                  : 'This component encountered an error and cannot be displayed.'}
              </p>
            </div>
          </div>

          {showErrorDetails && error && (
            <details className="mt-4">
              <summary className="cursor-pointer text-sm font-medium text-muted-foreground hover:text-foreground">
                Error Details
              </summary>
              <div className="mt-2 p-3 bg-muted rounded text-xs font-mono">
                <p className="font-semibold">{error.message}</p>
                {error.stack && (
                  <pre className="mt-2 whitespace-pre-wrap text-muted-foreground">
                    {error.stack}
                  </pre>
                )}
              </div>
            </details>
          )}

          <div className="flex gap-3">
            <button
              onClick={this.resetErrorBoundary}
              className="flex-1 px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors"
            >
              Try Again
            </button>
            {level === 'page' && (
              <button
                onClick={() => window.location.href = '/'}
                className="flex-1 px-4 py-2 bg-secondary text-secondary-foreground rounded-md hover:bg-secondary/90 transition-colors"
              >
                Go Home
              </button>
            )}
          </div>

          {errorCount > 1 && (
            <p className="text-xs text-muted-foreground text-center">
              Error occurred {errorCount} times
            </p>
          )}
        </div>
      </div>
    );
  };

  render() {
    const { hasError, error, errorInfo } = this.state;
    const { children, fallback, customErrorComponent: CustomError, isolate } = this.props;

    if (hasError && error) {
      // Use custom error component if provided
      if (CustomError) {
        return <CustomError error={error} reset={this.resetErrorBoundary} />;
      }

      // Use custom fallback if provided
      if (typeof fallback === 'function') {
        return <>{fallback(error, errorInfo!)}</>;
      }

      if (fallback) {
        return <>{fallback}</>;
      }

      // Use default fallback
      return this.renderDefaultFallback();
    }

    // Wrap in isolation container if specified
    if (isolate) {
      return (
        <div className="error-boundary-container" data-isolated="true">
          {children}
        </div>
      );
    }

    return <>{children}</>;
  }
}

/**
 * Hook to trigger error boundary (for testing or manual error handling)
 */
export const useErrorHandler = () => {
  return (error: Error) => {
    throw error;
  };
};

/**
 * HOC to wrap components with error boundary
 */
export const withErrorBoundary = <P extends object>(
  Component: React.ComponentType<P>,
  errorBoundaryProps?: Omit<{{componentName}}Props, 'children'>
) => {
  const WrappedComponent = (props: P) => (
    <{{componentName}} {...errorBoundaryProps}>
      <Component {...props} />
    </{{componentName}}>
  );
  
  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;
  
  return WrappedComponent;
};

{{componentName}}.displayName = '{{componentName}}';