/**
 * @fileoverview {{componentName}} Component - CVA Design System Compliant
 * @description Card component using CVA pattern with semantic tokens
 * @version 5.0.0
 * @compliance CVA-based, SSR-safe, Framework-agnostic, Token-based
 */

import React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@xala-technologies/ui-system/utils';

const {{camelCase componentName}}Variants = cva(
  'rounded-lg border bg-card text-card-foreground',
  {
    variants: {
      variant: {
        default: 'border-border',
        outlined: 'border-2 border-border bg-transparent',
        elevated: 'border-0 shadow-md',
        filled: 'border-0 bg-muted',
        ghost: 'border-0 bg-transparent',
      },
      padding: {
        none: 'p-0',
        sm: 'p-4',
        md: 'p-6',
        lg: 'p-8',
        xl: 'p-10',
      },
      interactive: {
        true: 'transition-all hover:shadow-lg cursor-pointer',
        false: '',
      },
    },
    defaultVariants: {
      variant: 'default',
      padding: 'md',
      interactive: false,
    },
  }
);

export interface {{componentName}}Props
  extends HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof {{camelCase componentName}}Variants> {
  readonly header?: React.ReactNode;
  readonly footer?: React.ReactNode;
  readonly media?: React.ReactNode;
  readonly mediaPosition?: 'top' | 'bottom' | 'left' | 'right';
  readonly 'data-testid'?: string;
}

export const {{componentName}} = forwardRef<HTMLDivElement, {{componentName}}Props>(
  (
    {
      children,
      className,
      variant,
      padding,
      interactive,
      header,
      footer,
      media,
      mediaPosition = 'top',
      'data-testid': testId,
      ...props
    },
    ref
  ): React.ReactElement => {
    const cardContent = (
      <>
        {header && (
          <div className={cn(
            'border-b border-border',
            padding === 'none' ? 'p-4' : padding === 'sm' ? 'pb-4 -mx-4 px-4' : 'pb-6 -mx-6 px-6'
          )}>
            {header}
          </div>
        )}
        
        <div className={header || footer ? 'py-4' : ''}>
          {children}
        </div>
        
        {footer && (
          <div className={cn(
            'border-t border-border',
            padding === 'none' ? 'p-4' : padding === 'sm' ? 'pt-4 -mx-4 px-4' : 'pt-6 -mx-6 px-6'
          )}>
            {footer}
          </div>
        )}
      </>
    );

    const mediaElement = media && (
      <div className={cn(
        'overflow-hidden',
        mediaPosition === 'top' && 'rounded-t-lg -mt-6 -mx-6 mb-6',
        mediaPosition === 'bottom' && 'rounded-b-lg -mb-6 -mx-6 mt-6',
        mediaPosition === 'left' && 'rounded-l-lg -ml-6 -my-6 mr-6',
        mediaPosition === 'right' && 'rounded-r-lg -mr-6 -my-6 ml-6'
      )}>
        {media}
      </div>
    );

    return (
      <div
        ref={ref}
        className={cn(
          {{camelCase componentName}}Variants({
            variant,
            padding,
            interactive,
          }),
          className
        )}
        data-testid={testId}
        {...props}
      >
        {mediaPosition === 'top' && mediaElement}
        
        {mediaPosition === 'left' || mediaPosition === 'right' ? (
          <div className={cn(
            'flex',
            mediaPosition === 'right' && 'flex-row-reverse'
          )}>
            {mediaElement}
            <div className="flex-1">
              {cardContent}
            </div>
          </div>
        ) : (
          cardContent
        )}
        
        {mediaPosition === 'bottom' && mediaElement}
      </div>
    );
  }
);

{{componentName}}.displayName = '{{componentName}}';