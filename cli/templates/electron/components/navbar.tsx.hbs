/**
 * @fileoverview {{componentName}} Component - Enterprise Standards Compliant
 * @description Enterprise-grade navbar component using design tokens
 * @version 5.0.0
 * @compliance WCAG 2.2 AAA, Token-first, SSR-safe, No hooks in components
 */

import { cn } from '@/lib/utils/cn';
import { cva, type VariantProps } from 'class-variance-authority';
import { forwardRef, type HTMLAttributes } from 'react';

const {{camelCase componentName}}Variants = cva(
  [
    'w-full',
    'flex',
    'items-center',
    'justify-between',
    'transition-all',
    'duration-200',
    'motion-reduce:transition-none',
    'border-b',
  ],
  {
    variants: {
      variant: {
        flat: ['bg-background', 'border-border', 'shadow-none'],
        elevated: ['bg-background', 'border-border', 'shadow-md'],
        outlined: ['bg-transparent', 'border-border', 'shadow-none'],
        floating: ['bg-background/95', 'backdrop-blur-md', 'border-border/50', 'shadow-lg'],
      },
      size: {
        sm: 'px-4 py-2 min-h-[48px]',
        md: 'px-6 py-3 min-h-[64px]',
        lg: 'px-8 py-4 min-h-[80px]',
      },
      sticky: {
        true: 'sticky top-0 z-50',
        false: 'relative',
      },
      fullWidth: {
        true: 'w-full',
        false: 'max-w-none',
      },
    },
    defaultVariants: {
      variant: 'flat',
      size: 'md',
      sticky: false,
      fullWidth: true,
    },
  }
);

export interface {{componentName}}Props
  extends HTMLAttributes<HTMLElement>,
    VariantProps<typeof {{camelCase componentName}}Variants> {
  readonly logo?: React.ReactNode;
  readonly navigation?: React.ReactNode;
  readonly searchComponent?: React.ReactNode;
  readonly actions?: React.ReactNode;
  readonly mobileMenuTrigger?: React.ReactNode;
  readonly responsive?: boolean;
  readonly containerMaxWidth?: string;
  readonly ariaLabel?: string;
}

/**
 * Pure presentational navbar component with no hooks
 * Uses CSS custom properties for theming
 */
export const {{componentName}} = forwardRef<HTMLElement, {{componentName}}Props>(
  (
    {
      className,
      variant,
      size,
      sticky,
      fullWidth,
      logo,
      navigation,
      searchComponent,
      actions,
      mobileMenuTrigger,
      responsive = true,
      containerMaxWidth,
      ariaLabel = 'Main navigation',
      ...props
    },
    ref
  ) => {
    return (
      <nav
        ref={ref}
        className={cn(
          {{camelCase componentName}}Variants({
            variant,
            size,
            sticky,
            fullWidth,
          }),
          className
        )}
        role="navigation"
        aria-label={ariaLabel}
        {...props}
      >
        <div
          className={cn(
            'w-full',
            'flex',
            'items-center',
            'justify-between',
            'gap-4',
            containerMaxWidth && `max-w-[${containerMaxWidth}]`,
            'mx-auto'
          )}
        >
          {logo && (
            <div className="flex-shrink-0" role="banner">
              {logo}
            </div>
          )}

          {navigation && (
            <div
              className={cn(
                'flex-1',
                'flex',
                'items-center',
                responsive && 'hidden md:flex'
              )}
              role="menubar"
              aria-orientation="horizontal"
            >
              {navigation}
            </div>
          )}

          {searchComponent && (
            <div
              className={cn(
                'flex-shrink-0',
                responsive && 'hidden lg:block'
              )}
              role="search"
            >
              {searchComponent}
            </div>
          )}

          <div className="flex items-center gap-2">
            {actions && (
              <div
                className={cn(
                  'flex',
                  'items-center',
                  'gap-2',
                  responsive && 'hidden sm:flex'
                )}
              >
                {actions}
              </div>
            )}

            {responsive && mobileMenuTrigger && (
              <div className="flex md:hidden">
                {mobileMenuTrigger}
              </div>
            )}
          </div>
        </div>
      </nav>
    );
  }
);

{{componentName}}.displayName = '{{componentName}}';