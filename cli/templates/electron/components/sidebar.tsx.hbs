/**
 * @fileoverview {{componentName}} Component - Enterprise Standards Compliant
 * @description Sidebar navigation component using design tokens
 * @version 5.0.0
 * @compliance SSR-Safe, Framework-agnostic, Token-based, WCAG AAA
 */

import { cn } from '@/lib/utils/cn';
import { cva, type VariantProps } from 'class-variance-authority';
import { forwardRef, type HTMLAttributes } from 'react';

const {{camelCase componentName}}Variants = cva(
  'flex flex-col h-full bg-background transition-all duration-200',
  {
    variants: {
      variant: {
        default: 'border-r border-border',
        elevated: 'shadow-lg',
        floating: 'shadow-xl rounded-lg m-2',
        transparent: 'bg-transparent',
      },
      size: {
        narrow: 'w-48',
        normal: 'w-64',
        wide: 'w-80',
        full: 'w-full',
      },
      position: {
        static: 'relative',
        fixed: 'fixed top-0 left-0 h-screen z-40',
        sticky: 'sticky top-0 h-screen',
      },
      collapsible: {
        true: 'transition-width duration-300',
        false: '',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'normal',
      position: 'static',
      collapsible: false,
    },
  }
);

const sidebarItemVariants = cva(
  'flex items-center px-4 py-2 transition-colors cursor-pointer',
  {
    variants: {
      active: {
        true: 'bg-primary/10 text-primary border-l-4 border-primary',
        false: 'hover:bg-muted text-foreground',
      },
      disabled: {
        true: 'opacity-50 cursor-not-allowed',
        false: '',
      },
    },
    defaultVariants: {
      active: false,
      disabled: false,
    },
  }
);

export interface SidebarItem {
  readonly id: string;
  readonly label: string;
  readonly icon?: React.ReactNode;
  readonly href?: string;
  readonly onClick?: () => void;
  readonly children?: ReadonlyArray<SidebarItem>;
  readonly disabled?: boolean;
  readonly badge?: string | number;
}

export interface {{componentName}}Props
  extends HTMLAttributes<HTMLElement>,
    VariantProps<typeof {{camelCase componentName}}Variants> {
  readonly items: ReadonlyArray<SidebarItem>;
  readonly activeItemId?: string;
  readonly onItemClick?: (item: SidebarItem) => void;
  readonly header?: React.ReactNode;
  readonly footer?: React.ReactNode;
  readonly collapsed?: boolean;
  readonly onCollapsedChange?: (collapsed: boolean) => void;
  readonly showCollapseButton?: boolean;
  readonly 'data-testid'?: string;
}

export const {{componentName}} = forwardRef<HTMLElement, {{componentName}}Props>(
  (
    {
      className,
      items,
      activeItemId,
      onItemClick,
      header,
      footer,
      variant,
      size,
      position,
      collapsible,
      collapsed = false,
      onCollapsedChange,
      showCollapseButton = false,
      'data-testid': testId,
      ...props
    },
    ref
  ) => {
    const handleItemClick = (item: SidebarItem) => {
      if (item.disabled) return;
      
      if (item.onClick) {
        item.onClick();
      }
      onItemClick?.(item);
    };

    const renderItem = (item: SidebarItem, level = 0) => {
      const isActive = item.id === activeItemId;
      const hasChildren = item.children && item.children.length > 0;

      return (
        <div key={item.id}>
          <div
            className={cn(
              sidebarItemVariants({ active: isActive, disabled: item.disabled }),
              level > 0 && 'pl-8'
            )}
            onClick={() => handleItemClick(item)}
            role="menuitem"
            aria-current={isActive ? 'page' : undefined}
            aria-disabled={item.disabled}
            tabIndex={item.disabled ? -1 : 0}
          >
            {item.icon && (
              <span className={cn('flex-shrink-0', collapsed ? '' : 'mr-3')}>
                {item.icon}
              </span>
            )}
            
            {!collapsed && (
              <>
                <span className="flex-1 truncate">{item.label}</span>
                
                {item.badge && (
                  <span className="ml-auto bg-primary/20 text-primary text-xs px-2 py-1 rounded-full">
                    {item.badge}
                  </span>
                )}
                
                {hasChildren && (
                  <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                )}
              </>
            )}
          </div>

          {!collapsed && hasChildren && (
            <div className="mt-1">
              {item.children!.map(child => renderItem(child, level + 1))}
            </div>
          )}
        </div>
      );
    };

    return (
      <aside
        ref={ref}
        className={cn(
          {{camelCase componentName}}Variants({ 
            variant, 
            size: collapsed ? 'narrow' : size, 
            position, 
            collapsible 
          }),
          collapsed && 'w-16',
          className
        )}
        role="navigation"
        aria-label="Sidebar navigation"
        data-testid={testId}
        {...props}
      >
        {header && (
          <div className="p-4 border-b border-border">
            {header}
          </div>
        )}

        <nav className="flex-1 overflow-y-auto py-4" role="menu">
          {items.map(item => renderItem(item))}
        </nav>

        {showCollapseButton && collapsible && (
          <button
            onClick={() => onCollapsedChange?.(!collapsed)}
            className="p-4 border-t border-border hover:bg-muted transition-colors"
            aria-label={collapsed ? 'Expand sidebar' : 'Collapse sidebar'}
          >
            <svg className="w-5 h-5 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d={collapsed ? "M13 5l7 7-7 7" : "M11 19l-7-7 7-7"} 
              />
            </svg>
          </button>
        )}

        {footer && (
          <div className="p-4 border-t border-border">
            {footer}
          </div>
        )}
      </aside>
    );
  }
);

{{componentName}}.displayName = '{{componentName}}';