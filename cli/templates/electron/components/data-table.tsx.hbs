/**
 * @fileoverview {{componentName}} Component - Enterprise Standards Compliant
 * @description Data table component - pure presentational with no state
 * @version 5.0.0
 * @compliance SSR-Safe, WCAG AAA, Token-based, No hooks
 */

import { cn } from '@/lib/utils/cn';
import { cva, type VariantProps } from 'class-variance-authority';
import React, { forwardRef } from 'react';

const {{camelCase componentName}}Variants = cva(
  'w-full border rounded-lg overflow-hidden',
  {
    variants: {
      variant: {
        default: 'border-border bg-background',
        striped: 'border-border bg-background',
        bordered: 'border-2 border-border',
        compact: 'border-border text-sm',
      },
      size: {
        sm: 'text-sm',
        md: 'text-base',
        lg: 'text-lg',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'md',
    },
  }
);

export interface Column<T> {
  readonly key: keyof T | string;
  readonly header: string;
  readonly width?: string;
  readonly sortable?: boolean;
  readonly render?: (value: any, row: T) => React.ReactNode;
  readonly align?: 'left' | 'center' | 'right';
}

export interface {{componentName}}Props<T = any>
  extends Omit<React.HTMLAttributes<HTMLTableElement>, 'children'>,
    VariantProps<typeof {{camelCase componentName}}Variants> {
  readonly columns: ReadonlyArray<Column<T>>;
  readonly data: ReadonlyArray<T>;
  readonly onRowClick?: (row: T, index: number) => void;
  readonly selectable?: boolean;
  readonly selectedRows?: ReadonlyArray<number>;
  readonly onSelectionChange?: (rowIndex: number) => void;
  readonly onSelectAll?: () => void;
  readonly sortColumn?: string | null;
  readonly sortDirection?: 'asc' | 'desc';
  readonly onSort?: (columnKey: string) => void;
  readonly loading?: boolean;
  readonly emptyMessage?: string;
  readonly 'data-testid'?: string;
}

/**
 * Pure presentational data table component
 * Parent component handles all state management (sorting, selection)
 */
export const {{componentName}} = forwardRef<HTMLTableElement, {{componentName}}Props>(
  <T extends Record<string, any>>(
    {
      className,
      columns,
      data,
      onRowClick,
      selectable = false,
      selectedRows = [],
      onSelectionChange,
      onSelectAll,
      sortColumn = null,
      sortDirection = 'asc',
      onSort,
      loading = false,
      emptyMessage = 'No data available',
      variant,
      size,
      'data-testid': testId,
      ...props
    }: {{componentName}}Props<T>,
    ref: React.ForwardedRef<HTMLTableElement>
  ) => {
    // Apply sorting if sortColumn is provided
    const sortedData = sortColumn 
      ? [...data].sort((a, b) => {
          const aValue = a[sortColumn];
          const bValue = b[sortColumn];
          
          if (aValue === bValue) return 0;
          
          const comparison = aValue < bValue ? -1 : 1;
          return sortDirection === 'asc' ? comparison : -comparison;
        })
      : data;
    
    const isAllSelected = selectedRows.length === data.length && data.length > 0;

    return (
      <div className={cn({{camelCase componentName}}Variants({ variant, size }), className)}>
        <table
          ref={ref}
          className="w-full"
          data-testid={testId}
          {...props}
        >
          <thead className="bg-muted/50 border-b border-border">
            <tr>
              {selectable && (
                <th className="w-12 px-4 py-3">
                  <input
                    type="checkbox"
                    checked={isAllSelected}
                    onChange={onSelectAll}
                    aria-label="Select all rows"
                    className="rounded border-border"
                  />
                </th>
              )}
              {columns.map((column) => (
                <th
                  key={String(column.key)}
                  className={cn(
                    'px-4 py-3 font-medium',
                    column.align === 'center' && 'text-center',
                    column.align === 'right' && 'text-right',
                    column.sortable && onSort && 'cursor-pointer hover:bg-muted/70',
                    column.width && `w-[${column.width}]`
                  )}
                  onClick={() => column.sortable && onSort?.(String(column.key))}
                >
                  <div className="flex items-center gap-2">
                    {column.header}
                    {column.sortable && onSort && sortColumn === String(column.key) && (
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path 
                          strokeLinecap="round" 
                          strokeLinejoin="round" 
                          strokeWidth={2} 
                          d={sortDirection === 'asc' ? "M5 15l7-7 7 7" : "M19 9l-7 7-7-7"} 
                        />
                      </svg>
                    )}
                  </div>
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr>
                <td colSpan={columns.length + (selectable ? 1 : 0)} className="text-center py-8">
                  <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto" />
                </td>
              </tr>
            ) : sortedData.length === 0 ? (
              <tr>
                <td colSpan={columns.length + (selectable ? 1 : 0)} className="text-center py-8 text-muted-foreground">
                  {emptyMessage}
                </td>
              </tr>
            ) : (
              sortedData.map((row, rowIndex) => {
                const isSelected = selectedRows.includes(rowIndex);
                return (
                  <tr
                    key={rowIndex}
                    className={cn(
                      'border-b border-border',
                      variant === 'striped' && rowIndex % 2 === 1 && 'bg-muted/30',
                      onRowClick && 'cursor-pointer hover:bg-muted/50',
                      isSelected && 'bg-primary/10'
                    )}
                    onClick={() => onRowClick?.(row, rowIndex)}
                  >
                    {selectable && (
                      <td className="px-4 py-3">
                        <input
                          type="checkbox"
                          checked={isSelected}
                          onChange={() => onSelectionChange?.(rowIndex)}
                          onClick={(e) => e.stopPropagation()}
                          aria-label={`Select row ${rowIndex + 1}`}
                          className="rounded border-border"
                        />
                      </td>
                    )}
                    {columns.map((column) => (
                      <td
                        key={String(column.key)}
                        className={cn(
                          'px-4 py-3',
                          column.align === 'center' && 'text-center',
                          column.align === 'right' && 'text-right'
                        )}
                      >
                        {column.render 
                          ? column.render(row[column.key as keyof T], row)
                          : String(row[column.key as keyof T] ?? '')}
                      </td>
                    ))}
                  </tr>
                );
              })
            )}
          </tbody>
        </table>
      </div>
    );
  }
) as <T = any>(props: {{componentName}}Props<T> & { ref?: React.ForwardedRef<HTMLTableElement> }) => JSX.Element;

{{componentName}}.displayName = '{{componentName}}';