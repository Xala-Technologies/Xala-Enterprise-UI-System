/**
 * @fileoverview {{componentName}} Component - Enterprise Standards Compliant
 * @description Modal/Dialog component - pure presentational with no state
 * @version 5.0.0
 * @compliance SSR-Safe, WCAG AAA, Token-based, No hooks
 */

import { cn } from '@/lib/utils/cn';
import { cva, type VariantProps } from 'class-variance-authority';
import React, { forwardRef } from 'react';

const {{camelCase componentName}}Variants = cva(
  'fixed inset-0 z-50 flex items-center justify-center p-4',
  {
    variants: {
      alignment: {
        center: 'items-center',
        top: 'items-start pt-20',
        bottom: 'items-end pb-20',
      },
    },
    defaultVariants: {
      alignment: 'center',
    },
  }
);

const modalContentVariants = cva(
  'relative bg-background rounded-lg shadow-xl max-h-[90vh] overflow-auto',
  {
    variants: {
      size: {
        sm: 'max-w-sm w-full',
        md: 'max-w-md w-full',
        lg: 'max-w-lg w-full',
        xl: 'max-w-xl w-full',
        '2xl': 'max-w-2xl w-full',
        full: 'max-w-[90vw] w-full',
      },
    },
    defaultVariants: {
      size: 'md',
    },
  }
);

export interface {{componentName}}Props
  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'title'>,
    VariantProps<typeof {{camelCase componentName}}Variants>,
    VariantProps<typeof modalContentVariants> {
  readonly isOpen: boolean;
  readonly onClose?: () => void;
  readonly onOverlayClick?: () => void;
  readonly title?: React.ReactNode;
  readonly footer?: React.ReactNode;
  readonly showCloseButton?: boolean;
  readonly 'data-testid'?: string;
}

/**
 * Pure presentational modal component
 * Parent component handles all state management and side effects
 * Parent should handle:
 * - Escape key listener
 * - Body scroll prevention
 * - Focus management
 */
export const {{componentName}} = forwardRef<HTMLDivElement, {{componentName}}Props>(
  (
    {
      children,
      className,
      isOpen,
      onClose,
      onOverlayClick,
      title,
      footer,
      showCloseButton = true,
      alignment,
      size,
      'data-testid': testId,
      ...props
    },
    ref
  ) => {

    if (!isOpen) return null;

    return (
      <div
        className={cn({{camelCase componentName}}Variants({ alignment }))}
        onClick={onOverlayClick}
        role="dialog"
        aria-modal="true"
        aria-labelledby={title ? 'modal-title' : undefined}
        data-testid={testId}
      >
        {/* Overlay */}
        <div className="absolute inset-0 bg-black/50 backdrop-blur-sm" aria-hidden="true" />
        
        {/* Modal Content */}
        <div
          ref={ref}
          className={cn(modalContentVariants({ size }), className)}
          onClick={(e) => e.stopPropagation()}
          {...props}
        >
          {/* Header */}
          {(title || showCloseButton) && (
            <div className="flex items-center justify-between p-6 border-b border-border">
              {title && (
                <h2 id="modal-title" className="text-lg font-semibold">
                  {title}
                </h2>
              )}
              {showCloseButton && (
                <button
                  onClick={onClose}
                  className="ml-auto p-2 hover:bg-muted rounded-lg transition-colors"
                  aria-label="Close modal"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              )}
            </div>
          )}
          
          {/* Body */}
          <div className="p-6">
            {children}
          </div>
          
          {/* Footer */}
          {footer && (
            <div className="p-6 border-t border-border">
              {footer}
            </div>
          )}
        </div>
      </div>
    );
  }
);

{{componentName}}.displayName = '{{componentName}}';